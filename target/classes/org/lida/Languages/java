# Java rules


Comments = [[//, ], [/*, */]]

Text = [[", \", /", "], [', \', /', ']]


Variables {
    Package {
        # package com.package
        pattern: "^[\t ]*package\s+([\w\.]+)\s*;"
    }
}


Identifiers {
    Public class {
        # public class ClassName
        pattern: "^(?:\s+)?(?:public\s+)(?:static|final\s+){0,}class\s+(\w+)"
    }
    Protected class {
        # protected class ClassName
        pattern: "^(?:\s+)?(?:protected\s+)(?:static|final\s+){0,}class\s+(\w+)"
    }
    Public function {
        # public void functionName()
        pattern: "^(?:\s+)?(?:public\s+)(?:static|final\s+){0,}(?:\w+\s+)(\w+)\(\)"
    }
    Protected function {
        # protected void functionName()
        pattern: "^(?:\s+)?(?:protected\s+)(?:static|final\s+){0,}(?:\w+\s+)(\w+)\(\)"
    }
    Public record {
        # public record RecordName
        pattern: "^(?:\s+)?(?:public\s+)(?:static|final\s+){0,}record\s+(\w+)"
    }
    Protected record {
        # protected record RecordName
        pattern: "^(?:\s+)?(?:protected\s+)(?:static|final\s+){0,}record\s+(\w+)"
    }
    Public interface {
        # public interface InterfaceName
        pattern: "^(?:\s+)?(?:public\s+)(?:static|final\s+){0,}interface\s+(\w+)"
    }
    Protected interface {
        # protected interface InterfaceName
        pattern: "^(?:\s+)?(?:protected\s+)(?:static|final\s+){0,}interface\s+(\w+)"
    }
    Public enum {
        # public enum EnumName
        pattern: "^(?:\s+)?(?:public\s+)(?:static|final\s+){0,}enum\s+(\w+)"
    }
    Protected enum {
        # protected enum EnumName
        pattern: "^(?:\s+)?(?:protected\s+)(?:static|final\s+){0,}enum\s+(\w+)"
    }
}


Dependencies {
    Import {
        # import com.example.ClassName
        pattern: "^import\s+(?:[\w]+\.)*([\w]+)\s*;"
        condition: "^import\s+!!Package!!\.([\w]+)\s*;"
    }
    Import all {
        # import org.example.Package.*;
        pattern: "^import\s+(?:\w+\.)*(\w+)\.\*\s*;"
        condition: !!Package!! == "import\s+(.*?)\.(?:[^.]+\;)"
        value: "must check all other files"
        hidden
    }
    Extends {
        # public class ClassName extends BaseClass
        pattern: "^(?:.*?\b)extends\b\s+(\w+)"
        condition: Package
    }
    Extends {
        # public class ClassName extends BaseClass
        pattern: "^(?:.*?\b)extends\b\s+(\w+)"
        condition: ||Import||
    }
    Extends {
        # public class ClassName extends BaseClass
        pattern: "^(?:.*?\b)extends\b\s+(\w+)"
        condition: ||Import all||
    }
    Implements {
        # public class ClassName implements FirstInterface, SecondInterface
        pattern: "^(?:.*?\b)implements\b\s+((?:\w+(?:\s*,\s*\w+)*))\s*;?"
        condition: Package
    }
    Implements {
        # public class ClassName implements FirstInterface, SecondInterface
        pattern: "^(?:.*?\b)implements\b\s+((?:\w+(?:\s*,\s*\w+)*))\s*;?"
        condition: ||Import||
    }
    Implements {
        # public class ClassName implements FirstInterface, SecondInterface
        pattern: "^(?:.*?\b)implements\b\s+((?:\w+(?:\s*,\s*\w+)*))\s*;?"
        condition: ||Import all||
    }
    Object instancing {
        # new ClassName(
        pattern: "new\s+(\w+)(?=\()"
        condition: Package
    }
    Object instancing {
        # new ClassName(
        pattern: "new\s+(\w+)(?=\()"
        condition: ||Import||
    }
    Object instancing {
        # new ClassName(
        pattern: "new\s+(\w+)(?=\()"
        condition: ||Import all||
    }
    Class variable type {
        # private ClassName instance
        pattern: "^(?:.*?)(?:private|public|protected)?\s*(?:static|final)?\s*(?:static|final)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*(?:[=;]|$)"
        condition: Package
    }
    Class variable type {
        # private ClassName instance
        pattern: "^(?:.*?)(?:private|public|protected)?\s*(?:static|final)?\s*(?:static|final)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*(?:[=;]|$)"
        condition: ||Import||
    }
    Class variable type {
        # private ClassName instance
        pattern: "^(?:.*?)(?:private|public|protected)?\s*(?:static|final)?\s*(?:static|final)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*(?:[=;]|$)"
        condition: ||Import all||
    }
    Variable type {
        # List<FirstClass, SecondClass>
        pattern: "\w+<((?:\w+(?:\s*,\s*\w+)*))>"
        condition: Package
    }
    Variable type {
        # List<FirstClass, SecondClass>
        pattern: "\w+<((?:\w+(?:\s*,\s*\w+)*))>"
        condition: ||Import||
    }
    Variable type {
        # List<FirstClass, SecondClass>
        pattern: "\w+<((?:\w+(?:\s*,\s*\w+)*))>"
        condition: ||Import all||
    }
    Return type {
        # public ClassName getValue(
        pattern: "^(?:.*?)(?:private|public|protected)?\s*(?:static|final)?\s*(?:static|final)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*\("
        condition: Package
    }
    Return type {
        # public ClassName getValue(
        pattern: "^(?:.*?)(?:private|public|protected)?\s*(?:static|final)?\s*(?:static|final)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*\("
        condition: ||Import||
    }
    Return type {
        # public ClassName getValue(
        pattern: "^(?:.*?)(?:private|public|protected)?\s*(?:static|final)?\s*(?:static|final)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*\("
        condition: ||Import all||
    }
    Parameter type {
        # (FirstClass parameter, SecondClass otherParameter)
        pattern: "(?<=\()(?:.*?,\s*)?((?:\w+)(?:<[^>]+>)?)\s+\w+(?:\s*,|\s*\))"
        condition: Package
    }
    Parameter type {
        # (FirstClass parameter, SecondClass otherParameter)
        pattern: "(?<=\()(?:.*?,\s*)?((?:\w+)(?:<[^>]+>)?)\s+\w+(?:\s*,|\s*\))"
        condition: ||Import||
    }
    Parameter type {
        # (FirstClass parameter, SecondClass otherParameter)
        pattern: "(?<=\()(?:.*?,\s*)?((?:\w+)(?:<[^>]+>)?)\s+\w+(?:\s*,|\s*\))"
        condition: ||Import all||
    }
    Static use {
        # ClassName.method()
        pattern: "\b([A-Z][a-zA-Z0-9]*)\.(?:\w+)?"
        condition: Package
    }
    Static use {
        # ClassName.method()
        pattern: "\b([A-Z][a-zA-Z0-9]*)\.(?:\w+)?"
        condition: ||Import||
    }
    Static use {
        # ClassName.method()
        pattern: "\b([A-Z][a-zA-Z0-9]*)\.(?:\w+)?"
        condition: ||Import all||
    }
    Static variable type {
        # ClassName.FileType
        pattern: "[A-Z][a-zA-Z0-9]*\.(\b[A-Z][a-zA-Z0-9]*\b)"
        condition: Package
    }
    Static variable type {
        # ClassName.FileType
        pattern: "[A-Z][a-zA-Z0-9]*\.(\b[A-Z][a-zA-Z0-9]*\b)"
        condition: ||Import||
    }
    Static variable type {
        # ClassName.FileType
        pattern: "[A-Z][a-zA-Z0-9]*\.(\b[A-Z][a-zA-Z0-9]*\b)"
        condition: ||Import all||
    }
}