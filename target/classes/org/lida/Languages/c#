# C# rules

Comments = [[//, ], [/*, */]]

Text = [[", \", /", "], [', \', /', '], [@", \" ]]


Variables {
    Namespace {
        # namespace NamespaceName
        pattern: "namespace\s*([\w\.]*)"
    }
}

Identifiers {
   Public class {
       # public class ClassName
       pattern: "^(?:\s+)?(?:public\s+)(?:(?:static|abstract|sealed)\s+)*class\s+(\w+)"
   }
   Protected class {
       # protected class ClassName
       pattern: "^(?:\s+)?(?:protected\s+)(?:(?:static|abstract|sealed)\s+)*class\s+(\w+)"
   }
   Public function {
       # public void FunctionName()
       pattern: "^(?:\s+)?(?:public\s+)(?:(?:static|abstract|virtual)\s+)*\w+\s+(\w+)\s*\("
   }
   Protected function {
       # protected void FunctionName()
       pattern: "^(?:\s+)?(?:protected\s+)(?:(?:static|abstract|virtual)\s+)*\w+\s+(\w+)\s*\("
   }
   Public record {
       # public record RecordName
       pattern: "^(?:\s+)?(?:public\s+)(?:(?:sealed|static)\s+)*record\s+(\w+)"
   }
   Protected record {
       # protected record RecordName
       pattern: "^(?:\s+)?(?:protected\s+)(?:(?:sealed|static)\s+)*record\s+(\w+)"
   }
   Public interface {
       # public interface InterfaceName
       pattern: "^(?:\s+)?(?:public\s+)interface\s+(\w+)"
   }
   Protected interface {
       # protected interface InterfaceName
       pattern: "^(?:\s+)?(?:protected\s+)interface\s+(\w+)"
   }
   Public enum {
       # public enum EnumName
       pattern: "^(?:\s+)?(?:public\s+)enum\s+(\w+)"
   }
   Protected enum {
       # protected enum EnumName
       pattern: "^(?:\s+)?(?:protected\s+)enum\s+(\w+)"
   }
}

Dependencies {
    Using {
        # import com.example.ClassName
        pattern: "using\s*(?:static\s*)*(?:\w+\s*\=\s*)?([\w\.]*)"
        condition: !!Namespace!! == "using\s*(?:static\s*)*(?:\w+\s*\=\s*)?([\w\.]*)"
        value: "constant dependency!"
        hidden
    }
    Extends {
        # public class ClassName : BaseClass, IInterface
        pattern: "^(?:.*?\bclass\b\s+\w+\s*:\s+)(\w+)"
        condition: Namespace
    }
    Extends {
        # public class ClassName : BaseClass, IInterface
        pattern: "^(?:.*?\bclass\b\s+\w+\s*:\s+)(\w+)"
        condition: ||Using||
    }
    Implements {
        # public class ClassName : BaseClass, IFirstInterface, ISecondInterface
        pattern: "^(?:.*?\bclass\b\s+\w+\s*:\s+)(?:\w+\s*,\s*)?((?:I\w+(?:\s*,\s*I\w+)*))"
        condition: Namespace
    }
    Implements {
        # public class ClassName : BaseClass, IFirstInterface, ISecondInterface
        pattern: "^(?:.*?\bclass\b\s+\w+\s*:\s+)(?:\w+\s*,\s*)?((?:I\w+(?:\s*,\s*I\w+)*))"
        condition: ||Using||
    }
    Object instancing {
        # new ClassName(
        pattern: "new\s+(\w+)\s*(?=\()"
        condition: Namespace
    }
    Object instancing {
        # new ClassName(
        pattern: "new\s+(\w+)\s*(?=\()"
        condition: ||Using||
    }
    Class variable type {
        # private ClassName instance
        pattern: "^(?:.*?)(?:private|public|protected|internal)?\s*(?:static|readonly|const)?\s*(?:static|readonly|const)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*(?:[=;]|$)"
        condition: Namespace
    }
    Class variable type {
        # private ClassName instance
        pattern: "^(?:.*?)(?:private|public|protected|internal)?\s*(?:static|readonly|const)?\s*(?:static|readonly|const)?\s+(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*(?:[=;]|$)"
        condition: ||Using||
    }
    Variable type {
        # List<FirstClass, SecondClass>
        pattern: "\w+<((?:\w+(?:\s*,\s*\w+)*))>"
        condition: Namespace
    }
    Variable type {
        # List<FirstClass, SecondClass>
        pattern: "\w+<((?:\w+(?:\s*,\s*\w+)*))>"
        condition: ||Using||
    }
    Return type {
        # public ClassName GetValue(
        pattern: "^(?:.*?)(?:private|public|protected|internal)?\s*(?:static)?\s*(?:async\s+)?(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*\("
        condition: Namespace
    }
    Return type {
        # public ClassName GetValue(
        pattern: "^(?:.*?)(?:private|public|protected|internal)?\s*(?:static)?\s*(?:async\s+)?(\w+)(?:<[\w<>, ]*>)?\s+\w+\s*\("
        condition: ||Using||
    }
    Parameter type {
        # (FirstClass parameter, SecondClass otherParameter)
        pattern: "(?<=\()(?:.*?,\s*)?((?:\w+)(?:<[^>]+>)?)\s+\w+(?:\s*,|\s*\))"
        condition: Namespace
    }
    Parameter type {
        # (FirstClass parameter, SecondClass otherParameter)
        pattern: "(?<=\()(?:.*?,\s*)?((?:\w+)(?:<[^>]+>)?)\s+\w+(?:\s*,|\s*\))"
        condition: ||Using||
    }
    Static use {
        # ClassName.Method()
        pattern: "\b([A-Z][a-zA-Z0-9]*)\.(?:\w+)?"
        condition: Namespace
    }
    Static use {
        # ClassName.Method()
        pattern: "\b([A-Z][a-zA-Z0-9]*)\.(?:\w+)?"
        condition: ||Using||
    }
    Static variable type {
        # ClassName.FileType
        pattern: "[A-Z][a-zA-Z0-9]*\.(\b[A-Z][a-zA-Z0-9]*\b)"
        condition: Namespace
    }
    Static variable type {
        # ClassName.FileType
        pattern: "[A-Z][a-zA-Z0-9]*\.(\b[A-Z][a-zA-Z0-9]*\b)"
        condition: ||Using||
    }
}
